// screen_login.dart

import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:frontend/services/service_auth.dart';
import 'package:frontend/services/user_storage.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:frontend/screens/screen_health_info/choice_info.dart';
import 'package:frontend/screens/screen_index.dart';
import 'dart:convert';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();

  final TextEditingController useridController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  void _login() async {
    final enteredId = useridController.text.trim();
    final password = passwordController.text.trim();

    log("üîê Trying login with ID: '$enteredId', PW: '$password'");

    final response = await AuthService.loginUser(
      userid: enteredId,
      password: password,
    );

    if (!mounted) return;

    log('ÏùëÎãµ statusCode: ${response.statusCode}');
    log('ÏùëÎãµ body: ${response.body}'); // ‚Üê Ïó¨Í∏∞ÏÑú JSON Ï†ÑÏ≤¥ ÌôïÏù∏ Í∞ÄÎä•

    try {
      final result = json.decode(response.body);

      if (response.statusCode == 200 &&
          result['success'] == true &&
          result['data'] != null) {
        final data = result['data'];
        final userId = data['userid'];
        final username = data['username'];
        final address = data['address'];
        final token = data['token'];
        final healthInfoSubmitted = data['healthInfoSubmitted'];

        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('jwt_token', token);

        await UserStorage.saveUserInfo(
          username: username,
          userid: userId,
          address: address,
        );
        
        if (!mounted) return;

        // ScaffoldMessenger.of(
        //   context,
        // ).showSnackBar(SnackBar(content: Text("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ: ${result['message']}")));

        log("‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ");

        // healthInfoSubmittedÏóê Îî∞Îùº ÌôîÎ©¥ Î∂ÑÍ∏∞
        if (token != null && healthInfoSubmitted == true) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (_) => const IndexScreen()),
          );
          log("üè† Í±¥Í∞ïÏ†ïÎ≥¥ ÏûÖÎ†•Îê® ‚Üí IndexScreen Ïù¥Îèô");
        } else {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (_) => ChoiceInfoScreen()),
          );
          log("üìã Í±¥Í∞ïÏ†ïÎ≥¥ ÎØ∏ÏûÖÎ†• ‚Üí ChoiceInfoScreen Ïù¥Îèô");
        }
      } else {
        final msg = result['message'] ?? "Î°úÍ∑∏Ïù∏ Ïã§Ìå® (ÏõêÏù∏ Î∂àÎ™Ö)";

        if (response.statusCode == 401) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text("ÏïÑÏù¥ÎîîÎÇò ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ª ÏûÖÎ†•ÎêòÏóàÏäµÎãàÎã§.")),
          );
        } else {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(SnackBar(content: Text("‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®: $msg")));
        }
        log("‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®: $msg");
      }
    } catch (e) {
      log("üö® Î°úÍ∑∏Ïù∏ Ï§ë JSON ÌååÏã± ÎòêÎäî ÏòàÏô∏ Î∞úÏÉù: $e");
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text("Î°úÍ∑∏Ïù∏ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.")));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 251, 255, 228),
      appBar: AppBar(
        // title: Text("Î°úÍ∑∏Ïù∏", style: TextStyle(fontWeight: FontWeight.bold)),
        backgroundColor: const Color.fromARGB(255, 251, 255, 228),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Padding(
            padding: EdgeInsets.only(
              bottom: MediaQuery.of(context).viewInsets.bottom + 16,
            ),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Center(
                    child: ClipOval(
                      child: Image.asset(
                        'assets/images/longevity_meals_logo.png',
                        width: 150,
                        height: 150,
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                  const SizedBox(height: 50),

                  SizedBox(
                    width: MediaQuery.of(context).size.width * 0.6,
                    child: TextFormField(
                      controller: useridController,
                      decoration: InputDecoration(labelText: 'ÏïÑÏù¥Îîî'),
                      validator:
                          (value) => value!.isEmpty ? 'ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî' : null,
                    ),
                  ),
                  const SizedBox(height: 25),

                  SizedBox(
                    width: MediaQuery.of(context).size.width * 0.6,
                    child: TextFormField(
                      controller: passwordController,
                      decoration: InputDecoration(labelText: 'ÎπÑÎ∞ÄÎ≤àÌò∏'),
                      validator:
                          (value) => value!.isEmpty ? 'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî' : null,
                      obscureText: true,
                    ),
                  ),
                  const SizedBox(height: 50),
                  ElevatedButton(
                    onPressed: () async {
                      if (_formKey.currentState!.validate()) {
                        _login();
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color.fromARGB(255, 196, 215, 110),
                      minimumSize: const Size(150, 50), // Î≤ÑÌäº ÎÜíÏù¥
                      textStyle: const TextStyle(fontSize: 20), // Ìè∞Ìä∏ ÌÅ¨Í∏∞
                    ),
                    child: Text(
                      'Î°úÍ∑∏Ïù∏',
                      style: TextStyle(
                        color: Colors.black,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
